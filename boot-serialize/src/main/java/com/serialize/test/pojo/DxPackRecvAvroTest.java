/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.serialize.test.pojo;

import lombok.Data;

@Data
@org.apache.avro.specific.AvroGenerated
public class DxPackRecvAvroTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DxPackRecvAvroTest\",\"namespace\":\"com.serialize.test.pojo\",\"fields\":[{\"name\":\"packId\",\"type\":\"string\"},{\"name\":\"packType\",\"type\":\"string\"},{\"name\":\"channelId\",\"type\":\"string\"},{\"name\":\"routeHist\",\"type\":\"string\"},{\"name\":\"packRecvStat\",\"type\":\"string\"},{\"name\":\"stateTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence packId;
  @Deprecated public CharSequence packType;
  @Deprecated public CharSequence channelId;
  @Deprecated public CharSequence routeHist;
  @Deprecated public CharSequence packRecvStat;
  @Deprecated public CharSequence stateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DxPackRecvAvroTest() {}

  /**
   * All-args constructor.
   */
  public DxPackRecvAvroTest(CharSequence packId, CharSequence packType, CharSequence channelId, CharSequence routeHist, CharSequence packRecvStat, CharSequence stateTime) {
    this.packId = packId;
    this.packType = packType;
    this.channelId = channelId;
    this.routeHist = routeHist;
    this.packRecvStat = packRecvStat;
    this.stateTime = stateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return packId;
    case 1: return packType;
    case 2: return channelId;
    case 3: return routeHist;
    case 4: return packRecvStat;
    case 5: return stateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: packId = (CharSequence)value$; break;
    case 1: packType = (CharSequence)value$; break;
    case 2: channelId = (CharSequence)value$; break;
    case 3: routeHist = (CharSequence)value$; break;
    case 4: packRecvStat = (CharSequence)value$; break;
    case 5: stateTime = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'packId' field.
   */
  public CharSequence getPackId() {
    return packId;
  }

  /**
   * Sets the value of the 'packId' field.
   * @param value the value to set.
   */
  public void setPackId(CharSequence value) {
    this.packId = value;
  }

  /**
   * Gets the value of the 'packType' field.
   */
  public CharSequence getPackType() {
    return packType;
  }

  /**
   * Sets the value of the 'packType' field.
   * @param value the value to set.
   */
  public void setPackType(CharSequence value) {
    this.packType = value;
  }

  /**
   * Gets the value of the 'channelId' field.
   */
  public CharSequence getChannelId() {
    return channelId;
  }

  /**
   * Sets the value of the 'channelId' field.
   * @param value the value to set.
   */
  public void setChannelId(CharSequence value) {
    this.channelId = value;
  }

  /**
   * Gets the value of the 'routeHist' field.
   */
  public CharSequence getRouteHist() {
    return routeHist;
  }

  /**
   * Sets the value of the 'routeHist' field.
   * @param value the value to set.
   */
  public void setRouteHist(CharSequence value) {
    this.routeHist = value;
  }

  /**
   * Gets the value of the 'packRecvStat' field.
   */
  public CharSequence getPackRecvStat() {
    return packRecvStat;
  }

  /**
   * Sets the value of the 'packRecvStat' field.
   * @param value the value to set.
   */
  public void setPackRecvStat(CharSequence value) {
    this.packRecvStat = value;
  }

  /**
   * Gets the value of the 'stateTime' field.
   */
  public CharSequence getStateTime() {
    return stateTime;
  }

  /**
   * Sets the value of the 'stateTime' field.
   * @param value the value to set.
   */
  public void setStateTime(CharSequence value) {
    this.stateTime = value;
  }

  /** Creates a new DxPackRecvAvroTest RecordBuilder */
  public static DxPackRecvAvroTest.Builder newBuilder() {
    return new DxPackRecvAvroTest.Builder();
  }

  /** Creates a new DxPackRecvAvroTest RecordBuilder by copying an existing Builder */
  public static DxPackRecvAvroTest.Builder newBuilder(DxPackRecvAvroTest.Builder other) {
    return new DxPackRecvAvroTest.Builder(other);
  }

  /** Creates a new DxPackRecvAvroTest RecordBuilder by copying an existing DxPackRecvAvroTest instance */
  public static DxPackRecvAvroTest.Builder newBuilder(DxPackRecvAvroTest other) {
    return new DxPackRecvAvroTest.Builder(other);
  }

  /**
   * RecordBuilder for DxPackRecvAvroTest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DxPackRecvAvroTest>
    implements org.apache.avro.data.RecordBuilder<DxPackRecvAvroTest> {

    private CharSequence packId;
    private CharSequence packType;
    private CharSequence channelId;
    private CharSequence routeHist;
    private CharSequence packRecvStat;
    private CharSequence stateTime;

    /** Creates a new Builder */
    private Builder() {
      super(DxPackRecvAvroTest.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(DxPackRecvAvroTest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.packId)) {
        this.packId = data().deepCopy(fields()[0].schema(), other.packId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.packType)) {
        this.packType = data().deepCopy(fields()[1].schema(), other.packType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.channelId)) {
        this.channelId = data().deepCopy(fields()[2].schema(), other.channelId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.routeHist)) {
        this.routeHist = data().deepCopy(fields()[3].schema(), other.routeHist);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.packRecvStat)) {
        this.packRecvStat = data().deepCopy(fields()[4].schema(), other.packRecvStat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stateTime)) {
        this.stateTime = data().deepCopy(fields()[5].schema(), other.stateTime);
        fieldSetFlags()[5] = true;
      }
    }

    /** Creates a Builder by copying an existing DxPackRecvAvroTest instance */
    private Builder(DxPackRecvAvroTest other) {
            super(DxPackRecvAvroTest.SCHEMA$);
      if (isValidValue(fields()[0], other.packId)) {
        this.packId = data().deepCopy(fields()[0].schema(), other.packId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.packType)) {
        this.packType = data().deepCopy(fields()[1].schema(), other.packType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.channelId)) {
        this.channelId = data().deepCopy(fields()[2].schema(), other.channelId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.routeHist)) {
        this.routeHist = data().deepCopy(fields()[3].schema(), other.routeHist);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.packRecvStat)) {
        this.packRecvStat = data().deepCopy(fields()[4].schema(), other.packRecvStat);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stateTime)) {
        this.stateTime = data().deepCopy(fields()[5].schema(), other.stateTime);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'packId' field */
    public CharSequence getPackId() {
      return packId;
    }

    /** Sets the value of the 'packId' field */
    public DxPackRecvAvroTest.Builder setPackId(CharSequence value) {
      validate(fields()[0], value);
      this.packId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'packId' field has been set */
    public boolean hasPackId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'packId' field */
    public DxPackRecvAvroTest.Builder clearPackId() {
      packId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'packType' field */
    public CharSequence getPackType() {
      return packType;
    }

    /** Sets the value of the 'packType' field */
    public DxPackRecvAvroTest.Builder setPackType(CharSequence value) {
      validate(fields()[1], value);
      this.packType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'packType' field has been set */
    public boolean hasPackType() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'packType' field */
    public DxPackRecvAvroTest.Builder clearPackType() {
      packType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'channelId' field */
    public CharSequence getChannelId() {
      return channelId;
    }

    /** Sets the value of the 'channelId' field */
    public DxPackRecvAvroTest.Builder setChannelId(CharSequence value) {
      validate(fields()[2], value);
      this.channelId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'channelId' field has been set */
    public boolean hasChannelId() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'channelId' field */
    public DxPackRecvAvroTest.Builder clearChannelId() {
      channelId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'routeHist' field */
    public CharSequence getRouteHist() {
      return routeHist;
    }

    /** Sets the value of the 'routeHist' field */
    public DxPackRecvAvroTest.Builder setRouteHist(CharSequence value) {
      validate(fields()[3], value);
      this.routeHist = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'routeHist' field has been set */
    public boolean hasRouteHist() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'routeHist' field */
    public DxPackRecvAvroTest.Builder clearRouteHist() {
      routeHist = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'packRecvStat' field */
    public CharSequence getPackRecvStat() {
      return packRecvStat;
    }

    /** Sets the value of the 'packRecvStat' field */
    public DxPackRecvAvroTest.Builder setPackRecvStat(CharSequence value) {
      validate(fields()[4], value);
      this.packRecvStat = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'packRecvStat' field has been set */
    public boolean hasPackRecvStat() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'packRecvStat' field */
    public DxPackRecvAvroTest.Builder clearPackRecvStat() {
      packRecvStat = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'stateTime' field */
    public CharSequence getStateTime() {
      return stateTime;
    }

    /** Sets the value of the 'stateTime' field */
    public DxPackRecvAvroTest.Builder setStateTime(CharSequence value) {
      validate(fields()[5], value);
      this.stateTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'stateTime' field has been set */
    public boolean hasStateTime() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'stateTime' field */
    public DxPackRecvAvroTest.Builder clearStateTime() {
      stateTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public DxPackRecvAvroTest build() {
      try {
        DxPackRecvAvroTest record = new DxPackRecvAvroTest();
        record.packId = fieldSetFlags()[0] ? this.packId : (CharSequence) defaultValue(fields()[0]);
        record.packType = fieldSetFlags()[1] ? this.packType : (CharSequence) defaultValue(fields()[1]);
        record.channelId = fieldSetFlags()[2] ? this.channelId : (CharSequence) defaultValue(fields()[2]);
        record.routeHist = fieldSetFlags()[3] ? this.routeHist : (CharSequence) defaultValue(fields()[3]);
        record.packRecvStat = fieldSetFlags()[4] ? this.packRecvStat : (CharSequence) defaultValue(fields()[4]);
        record.stateTime = fieldSetFlags()[5] ? this.stateTime : (CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
